databse sql_store

USE sql_store;

SELECT * 
FROM customers
-- WHERE customer_id = 1 
ORDER BY first_name 
_________________________
SELECT 
	last_name, 
    first_name, 
    (points + 10) * 100 AS 'discount point'
from customers;

SELECT * FROM sql_store.customers;
select state from customers;
SELECT DISTINCT state FROM customers;

SELECT name, unit_price, unit_price * 1.1 AS 
new_price FROM products;
___________________________________________
SELECT 
	last_name, 
    first_name, 
    (points + 10) * 100 AS 'discount point'
from customers;

SELECT * FROM sql_store.customers;
select state from customers;
SELECT DISTINCT state FROM customers;

SELECT name, unit_price, unit_price * 1.1 AS 
new_price FROM products;

SELECT * FROM customers WHERE points > 3000;

SELECT * FROM customers WHERE state <> 'VA';
SELECT * FROM customers WHERE birth_date > '1990-01-01' AND points > 1000;
SELECT * FROM customers
WHERE birth_date > '1990-01-01' OR
(points > 100 AND state = 'VA');

SELECT * FROM customers
WHERE birth_date > '1990-01-01' AND points > 1000;

SELECT * FROM order_items WHERE order_id = 6  AND unit_price * quantity > 30;

select * from customers where state = 'VA' or state = 'GA' or state = 'FL';

SELECT * FROM customers WHERE state NOT IN ('va', 'FL', 'GA');
select * from products where quantity_in_stock IN (49,38,72)
_________________________________________________________________________
#The like option

SELECT  * FROM customers where last_name LIKE '%b%';
SELECT  * FROM customers where last_name LIKE '%y';
SELECT  * FROM customers where last_name LIKE '%';
SELECT  * FROM customers where last_name LIKE '_____y'; (5under score)
SELECT  * FROM customers where last_name LIKE 'b____y';(4under score)

SELECT  * FROM customers WHERE address LIKE '%trail%' OR address LIKE '%avenue';
SELECT  * FROM customers where phone LIKE '%9';
_ _ ^ beginning
_ _ $ end
_ _ | logival or
_ _ [abcd]
_ _  [a-f]
________________________________________________________________________

SELECT * 
FROM customers 
WHERE first_name REGEXP 'Elka|ambur';

SELECT * FROM customers
WHERE last_name
REGEXP 'ey$|on$'

SELECT *
FROM customers
WHERE last_name REGEXP '^my|se';

SELECT * FROM customers
WHERE last_name
REGEXP 'br|bu';
__________________________________________________
select * from customers where phone IS not NULL;

select * 
from orders
where shipper_id IS NULL;
___________________________________
select* from customers order by state desc, first_name desc

SELECT *, quantity * unit_price AS total_price
FROM  order_itemS
WHERE order_id = 2
ORDER BY total_price DESC;
___________________________________
_ _ limit clause

select * 
from customers 
order by points desc
limit 3;

select* 
from customers 
limit 6, 3
_____________________________________________
USE sql_inventory;

SELECT * from sql_store.order_items oi
JOIN products p 
ON oi.product_id = p.product_id;


USE sql_hr;
select * from employees e 
join employees m ON e.reports_to = m.employee_id;
____________________________________________________

#self Joins
USE sql_hr;
select
	e.employee_id,
    e.first_name,
    m.first_name AS manager
FROM employees e
join employees m
ON e.reports_to = m.employee_id;
___________________________________

USE sql_store;

SELECT * FROM orders o 
JOIN customers c
	ON o.customer_id = c.customer_id
JOIN order_statuses os
	ON o.status = os.order_status_id;
    
    SELECT 
		o.order_id,
		o.order_date,
        c.first_name,
        c.last_name,
        os.name AS status
FROM orders o 
JOIN customers c
ON o.customer_id = c.customer_id
JOIN order_statuses os
ON o.status = os.order_status_id;


SELECT
	p.product_id,
    p.name,
    oi.quantity
FROM products p LEFT JOIN order_items oi 
ON p.product_id = oi.product_id;
___________________________________________

USE sql_hr;
show tables

SELECT e.employee_id,
e.first_name,
m.first_name
AS manager
FROM employees e
LEFT JOIN employees m
ON e.reports_to = m.employee_id;

SELECT * FROM order_items oi
JOIN order_item_notes oin
	USING (order_id, product_id);
    

	select
		sh.name AS shipper,
        p.name AS product
    from shippers sh, products p
    order by sh.name;
_________________________________________________________

select * from customers;

INSERT INTO customers VALUES 
( default,
'Johnny', 
'Louis', 
'1990-01-15', 
NULL, 'address', 
'city', 
'MA', 
default);


INSERT INTO shippers (name)
VALUES 	('Shipper1'),
		('Shipper2'),
        ('Shipper3');
        
insert into products (name, quantity_in_stock, unit_price)
values ('Product1', 10, 1.95),
		('Product2', 11, 1.95),
        ('Produt3', 12, 1.95);
        
INSERT INTO orders (customer_id, order_date, status)
VALUES (1, '2020-01-02', 1);

INSERT INTO order_items
VALUES (last_insert_id(), 1, 1, 2.95),
	   (last_insert_id(), 2, 1, 3.95);
       
       
CREATE TABLE orders_archived AS 
SELECT * FROM orders;

INSERT INTO orders_archived
SELECT * FROM orders WHERE order_date < '2019-01-01';
_________________________________________________________________

USE sql_invoicing;
select * from invoices;

SELECT 
MAX(invoice_total) AS highest,
MIN(invoice_total) AS lowest,
AVG(invoice_total) AS average,
SUM(invoice_total) AS total,
COUNT(invoice_total) AS number_of_invoices,
COUNT(payment_date) AS count_of_payments,
COUNT(*) AS total_records
FROM invoices; 
____________________________________________________________________________

USE sql_invoicing;
select * from invoices;

SELECT 
MAX(invoice_total) AS highest,
MIN(invoice_total) AS lowest,
AVG(invoice_total) AS average,
SUM(invoice_total * 1.1) AS total,
COUNT(*) AS total_records
FROM invoices 
WHERE invoice_date > '2019-07-01';
____________________________________________________________

SELECT 'First half of 2019' AS date_range,
SUM(invoice_total) AS total_sales,
SUM(payment_total) AS total_paymets,
SUM(invoice_total - payment_total) AS what_we_expect 
FROM invoices
WHERE invoice_date
BETWEEN '2019-01-01' AND '2019-06-30'
UNION
SELECT 'Second half of 2019' AS date_range,
SUM(invoice_total) AS total_sales,
SUM(payment_total) AS total_paymets,
SUM(invoice_total - payment_total) AS what_we_expect 
FROM invoices
WHERE invoice_date
BETWEEN '2019-07-01' AND '2019-12-31'
UNION
SELECT 'Total' AS date_range,
SUM(invoice_total) AS total_sales,
SUM(payment_total) AS total_paymets,
SUM(invoice_total - payment_total) AS what_we_expect 
FROM invoices
WHERE invoice_date
BETWEEN '2019-01-01' AND '2019-12-31'; 
__________________________________________________________

select
	state,
    city,
    SUM(invoice_total) AS total_sales
from invoices i
JOIN clients USING (client_id)
group by state, city;


SELECT
	date,
    pm.name AS payment_method,
    SUM(amount) AS total_payments
FROM payments p
JOIN payment_methods pm
	ON p.payment_method = pm.payment_method_id
GROUP BY date, payment_method
ORDER BY date;
___________________________________________________________________

USE sql_store;
select
	c.customer_id,
    c.first_name,
    c.last_name,
    SUM(oi.quantity * oi.unit_price) AS total_sales
from customers c
join orders o USING (customer_id)
join order_items oi USING (order_id)
where state = 'VA'
group by
	c.customer_id,
    c.first_name,
    c.last_name
having total_sales > 100;

_______________________________________________

select distinct customer_id, first_name, last_name
from customers c
join orders o using (customer_id)
join order_items oi using (order_id)
where oi.product_id = 3;

use sql_invoicing;
select client_id, count(*)
from invoices 
group by client_id
having count(*) >= 2;

select client_id
from invoices 
group by client_id
having count(*) >= 2;


select * from clients
where client_id = ANY (
select client_id
from invoices 
group by client_id
having count(*) >= 2
);

___________________________________________________________________
use sql_store;

select * from products where product_id NOT IN (
select product_id
from order_items
);

select * from products p where not exists (
select product_id
from order_items
where product_id = p.product_id
);

select concat(first_name, ' ', last_name) AS full_name 
from customers;

select now();
select now(), curdate(), curtime();
select minute(now());
select monthname(now());
select extract(Week from now());

select date_format(NOW(), '%M %d %y');
select time_format (NOW(), '%H %i %p');
select date_add(now(), interval 1 day);
select date_add(now(), interval 1 year);
select date_sub(now(), interval 1 day);

select
	concat(first_name, ' ', last_name) as customer,
    coalesce(phone, 'Unknown') as phone 
FROM customers;

select
	product_id,
    name,
    count(*) as orders,
    if(count(*) > 1, 'Many times', 'Once') as frequency
    from products
    join order_items using (product_id)
    group by product_id, name;
    
    select * from customers;
___________________________________________________
use sql_invoicing;
select * from sql_invoicing;

DELIMITER $$
CREATE PROCEDURE get_clients()
BEGIN
	SELECT  * FROM clients;
    END$$
    
DELIMITER ; 

select * from clients;

call get_clients;

SELECT * 
FROM invoices_with_balance
WHERE balance > 0;

DELIMITER $$
CREATE PROCEDURE get_invoices_with_balance()
BEGIN
	SELECT *
    FROM invoices_with_balance
    WHERE balance > 0;
END$$
_______________________________________________________
use sql_store;
start transaction;

insert into orders(customer_id, order_date, status)
values (1, '2019-01-01', 1);
insert into order_items 
values (last_insert_id(), 1, 1, 1);
COMMIT;

START TRANSACTION; 
UPDATE customers SET state = 'VA' WHERE customer_id = 1;
UPDATE orders SET status = 1 WHERE order_id = 1;
COMMIT;

SELECT * FROM customers;
______________________________________________
CREATE DATABASE IF NOT EXISTS sql_store2;
USE sql_store2;
DROP TABLE IF EXISTS orders;
DROP TABLE IF EXISTS customers;

CREATE TABLE IF NOT EXISTS customers
(
	customer_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50) NOT NULL,
    points 	INT NOT NULL DEFAULT 0,
    email VARCHAR(255) NOT NULL UNIQUE
    );
    
CREATE TABLE orders
(
	order_id INT PRIMARY KEY,
    customer_id INT NOT NULL,
    FOREIGN KEY fk_orders_customers (customer_id)
		REFERENCES customers (customer_id)
        ON UPDATE CASCADE
        ON DELETE NO ACTION
);

show charset;
